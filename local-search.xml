<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>About typealias</title>
    <link href="/2022/03/26/about-typealiads/"/>
    <url>/2022/03/26/about-typealiads/</url>
    
    <content type="html"><![CDATA[<h1 id="About-typealias"><a href="#About-typealias" class="headerlink" title="About typealias"></a>About typealias</h1><h2 id="What-is-typealias"><a href="#What-is-typealias" class="headerlink" title="What is typealias?"></a>What is typealias?</h2><p>Typealias introduces named alias of existing type. It’s kind like a nick name for existing type</p><h2 id="Why-typealias"><a href="#Why-typealias" class="headerlink" title="Why typealias?"></a>Why typealias?</h2><p>Typealias embeds semantics into our types, which can make a big difference in making code more intuitive and easier to work with.</p><p>For example, primitive types , such as numbers, strings, when we see them in a function signature, we usually have to rely on the name of that function and its parameters to understand what that value are used for.</p><p>There are two function in codes below. In Example-2, we barely can get the information of metrics of  <code>weight</code>, it could be pound or kilograms. Of course we can change the name to <code>weightInKilograms</code> to specify metric, but type alias let us understand the purpose of the property through type, thus the property can have more concise name.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">// Example 1</span><br><span class="hljs-keyword">typealias</span> <span class="hljs-type">Kilograms</span> <span class="hljs-operator">=</span> <span class="hljs-type">Double</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">User</span> &#123;<br><span class="hljs-keyword">var</span> weight: <span class="hljs-type">Kilograms</span><br>&#125;<br><br><span class="hljs-comment">// Example 2</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">User</span> &#123;<br><span class="hljs-keyword">var</span> weight: <span class="hljs-type">Double</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Tips-for-typealias"><a href="#Tips-for-typealias" class="headerlink" title="Tips for typealias?"></a>Tips for typealias?</h2><p>Typealias brings semantic to code, but semantic can be confusing sometime, since people don’t share the same context, so you could find a balance when using typealias. </p><h2 id="Links"><a href="#Links" class="headerlink" title="Links:"></a>Links:</h2><p><a href="https://artsy.github.io/blog/2016/06/24/typealias-for-great-good/">Swift Type Aliases: Use Early and Often</a></p><p><a href="https://www.avanderlee.com/swift/typealias-usage-swift/">Typealias usage in Swift</a></p><p><a href="https://www.swiftbysundell.com/articles/the-power-of-type-aliases-in-swift/">The power of type aliases in Swift | Swift by Sundell</a></p><p><a href="https://sarunw.com/posts/swift-typealias/">Swift typealias: What is it and when to use it | Sarunw</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>swift</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Gulu 隐私政策</title>
    <link href="/2022/01/24/gulu-policy/"/>
    <url>/2022/01/24/gulu-policy/</url>
    
    <content type="html"><![CDATA[<h1 id="Gulu-Privacy-Policy"><a href="#Gulu-Privacy-Policy" class="headerlink" title="Gulu Privacy Policy"></a>Gulu Privacy Policy</h1><p>We built the Gulu app as a Commercial app. This SERVICE is provided by and is intended for use as is.</p><p>This page is used to inform visitors regarding my policies with the collection, use, and disclosure of Personal Information if anyone decided to use my Service. If you choose to use my Service, then you agree to the collection and use of information in relation to this policy. The Personal Information that I collect is used for providing and improving the Service. I will not use or share your information with anyone except as described in this Privacy Policy.</p><p>The terms used in this Privacy Policy have the same meanings as in our Terms and Conditions, which is accessible at Gulu unless otherwise defined in this Privacy Policy.</p><p>Information Collection and Use</p><p>For a better experience, while using our Service, I may require you to provide us with certain personally identifiable information. The information that I request will be retained on your device and is not collected by me in any way.</p><p>The app does not use any third party services that may collect information used to identify you. </p><p>I want to inform you that whenever you use my Service, in a case of an error in the app I collect data and information (through third party products) on your phone called Log Data. This Log Data may include information such as your device Internet Protocol address, device name, operating system version, the configuration of the app when utilizing my Service, the time and date of your use of the Service, and other statistics.</p><p>Cookies</p><p>Cookies are files with a small amount of data that are commonly used as anonymous unique identifiers. These are sent to your browser from the websites that you visit and are stored on your device’s internal memory. This Service does not use these “cookies” explicitly. However, the app may use third party code and libraries that use “cookies” to collect information and improve their services. You have the option to either accept or refuse these cookies and know when a cookie is being sent to your device. If you choose to refuse our cookies, you may not be able to use some portions of this Service.</p><p>Service Providers</p><p>I may employ third-party companies and individuals due to the following reasons:</p><ul><li>To facilitate our Service;</li><li>To provide the Service on our behalf;</li><li>To perform Service-related services; or</li><li>To assist us in analyzing how our Service is used.<br>I want to inform users of this Service that these third parties have access to your Personal Information. The reason is to perform the tasks assigned to them on our behalf. However, they are obligated not to disclose or use the information for any other purpose.</li></ul><p>Security</p><p>I value your trust in providing us your Personal Information, thus we are striving to use commercially acceptable means of protecting it. But remember that no method of transmission over the internet, or method of electronic storage is 100% secure and reliable, and I cannot guarantee its absolute security.</p><p>Links to Other Sites</p><p>This Service may contain links to other sites. If you click on a third-party link, you will be directed to that site. Note that these external sites are not operated by me. Therefore, I strongly advise you to review the Privacy Policy of these websites. I have no control over and assume no responsibility for the content, privacy policies, or practices of any third-party sites or services.</p><p>Children’s Privacy</p><p>These Services do not address anyone under the age of 13. I do not knowingly collect personally identifiable information from children under 13. In the case I discover that a child under 13 has provided me with personal information, I immediately delete this from our servers. If you are a parent or guardian and you are aware that your child has provided us with personal information, please contact me so that I will be able to do necessary actions.</p><p>Changes to This Privacy Policy</p><p>I may update our Privacy Policy from time to time. Thus, you are advised to review this page periodically for any changes. I will notify you of any changes by posting the new Privacy Policy on this page. These changes are effective immediately after they are posted on this page.</p><p>Contact Us</p><p>If you have any questions about this Agreement, please contact us.<br><a href="mailto:&#x63;&#x68;&#x61;&#110;&#100;&#x6c;&#101;&#x72;&#122;&#x6f;&#117;&#x40;&#x67;&#109;&#97;&#105;&#108;&#46;&#99;&#111;&#109;">&#x63;&#x68;&#x61;&#110;&#100;&#x6c;&#101;&#x72;&#122;&#x6f;&#117;&#x40;&#x67;&#109;&#97;&#105;&#108;&#46;&#99;&#111;&#109;</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>macOS Intro - 1：Things about NSWindow、NSWindowController、NSViewController</title>
    <link href="/2021/11/01/macos-intro-1/"/>
    <url>/2021/11/01/macos-intro-1/</url>
    
    <content type="html"><![CDATA[<h1 id="Basic"><a href="#Basic" class="headerlink" title="Basic"></a>Basic</h1><p>在<code>iOS</code>开发中，我们了解到视图的展示是依赖 <code>UIView</code>，<code>APP</code> 启动时创建 <code>UIWindow</code>，设置<code>rootViewController</code>，<code>viewController</code>加载<code>view</code>。<br>macOS 的原理是相似的，视图展示主要依赖四个元素：</p><ul><li>NSWindowController</li><li>NSWindow</li><li>NSViewController</li><li>NSView</li></ul><h3 id="NSWindowController"><a href="#NSWindowController" class="headerlink" title="NSWindowController"></a>NSWindowController</h3><p>根据官方文档可以了解到 <code>NSWindowController</code> 的职责主要体现在：</p><ul><li>加载和现实 <code>window</code></li><li>在合适的实际关闭 <code>window</code></li><li>负责对 <code>window</code> 进行一些配置（title 等），存储 <code>window</code> 的 <code>frame</code>.</li><li>让其管理的窗口和应用程序的其他文档窗口产生一定的级联</li></ul><h3 id="NSWindow"><a href="#NSWindow" class="headerlink" title="NSWindow"></a>NSWindow</h3><p><code>NSWindow</code>是 macOS 应用显示和交互的基础，页面的展示基于 <code>window</code>，鼠标和键盘的事件也是通过 <code>window</code> 去传递给响应者。</p><h3 id="NSViewController"><a href="#NSViewController" class="headerlink" title="NSViewController"></a>NSViewController</h3><ul><li>与 <code>UIViewController</code> 类似，负责管理视图的生命周期，也能管理 <code>childViewController</code></li><li>不能独立展示，必须依赖 <code>NSWindow</code>，必须将 <code>NSViewController</code> 设置为 <code>window</code> 的 <code>contentViewController</code>，或者 <code>NSWindowController.view</code> 设置为 <code>NSWindow</code> 的 <code>contentView</code>，或者 <code>NSWindowController</code>的<code>contentViewController</code> 才能展示</li></ul><h1 id="NSWindow、NSWindowController、NSViewController、NSView-之间的关系"><a href="#NSWindow、NSWindowController、NSViewController、NSView-之间的关系" class="headerlink" title="NSWindow、NSWindowController、NSViewController、NSView 之间的关系"></a>NSWindow、NSWindowController、NSViewController、NSView 之间的关系</h1><p>可以简单的用一个图来概括这四者的关系：<br><img src="https://i.loli.net/2021/11/01/1BW4onqmZLK7AXw.png" alt="macOS-1-NSWindowControllerNSWindowNSViewController-3.png"></p><h3 id="NSWindowController-管理-NSWindow"><a href="#NSWindowController-管理-NSWindow" class="headerlink" title="NSWindowController 管理 NSWindow"></a><code>NSWindowController</code> 管理 <code>NSWindow</code></h3><p><code>NSWindowController</code> 的 <code>window</code> 即其负责管理的 <code>window</code>，通过<code>initWithWindow</code>在初始化时设置自己的<code>window</code></p><h3 id="NSViewController-负责-NSWindow-内容的展示"><a href="#NSViewController-负责-NSWindow-内容的展示" class="headerlink" title="NSViewController 负责 NSWindow 内容的展示"></a><code>NSViewController</code> 负责 <code>NSWindow</code> 内容的展示</h3><p>窗口所展示的内容主要是通过 <code>NSViewController</code> 加载视图，我们可以通过设置<code>ViewController</code>为<code>NSWindow</code>的<code>contentController</code>或者<code>ViewController.view</code> 为 <code>NSWindow.contentView</code> 来实现 <code>ViewController</code> 的展示。或者我们也可以在 <code>NSWindowController</code> 设置其 <code>contentViewController</code> 来实现 <code>ViewController</code> 的展示。</p><h3 id="NSViewController-内容为-NSView"><a href="#NSViewController-内容为-NSView" class="headerlink" title="NSViewController 内容为 NSView"></a><code>NSViewController</code> 内容为 <code>NSView</code></h3><p>这里与iOS相同，<code>NSViewController</code> 通过加载 <code>View</code> 来进行内容展示。</p><h3 id="NSWindow与NSView的关系"><a href="#NSWindow与NSView的关系" class="headerlink" title="NSWindow与NSView的关系"></a><code>NSWindow</code>与<code>NSView</code>的关系</h3><ul><li>窗口依赖视图展示：窗口必须有一个根视图<code>contentView</code></li><li>每一个视图都有一个窗口：通过<code>view.window</code> 获取当前视图的窗口<br>*在窗口加载之前即<code>windowDidLoad</code>之前，会先加载window对应的内容视图，执行<code>ViewController</code>的<code>viewDidLoad</code>方法，在<code>viewDidLoad</code>中<code>view</code>的<code>window</code>属性还没有被设置，所以需要等到视图展示即<code>viewDidAppear</code>的时候获取<code>view``所在</code>window，<code>view</code>的子视图也是如此</li></ul><hr><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p><a href="https://blog.csdn.net/lovechris00/article/details/79486949">macOS 开发 - NSWindow、NSWindowController、NSViewController、NSView 的关系和创建</a><br><a href="https://developer.apple.com/documentation/appkit/nswindow">Apple Documentation - NSWindow</a><br><a href="https://developer.apple.com/documentation/appkit/nswindowcontroller">Apple Documentation - NSWindowController</a><br><a href="https://www.macdev.io/">macOS 应用开发指南</a></p>]]></content>
    
    
    <categories>
      
      <category>macOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>macOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Why metaclass?</title>
    <link href="/2020/06/24/why-metaclass/"/>
    <url>/2020/06/24/why-metaclass/</url>
    
    <content type="html"><![CDATA[<h1 id="Why-metaclass"><a href="#Why-metaclass" class="headerlink" title="Why  metaclass?"></a>Why  metaclass?</h1><p>翻了一些源码和类似的博客，得到的结论大致可以总结如下：</p><p>Smalltalk 与面向对象的结合，关心的是实现的功能而不是关注类本身，本质上向对象发送消息的方案是统一的，实现方面：存储方法的方法列表，和消息发送的时候查询方法的方案，在实例对象和类对象上复用，所以搞出meta class，满足msgsend在实例对象和类对象上都可以使用。</p><p>从<code>msgsend</code>本质去看，<code>msgsend</code>调用之后，最终会走<code>_class_lookupMethodAndLoadCache3</code>方法并调用<code>lookUpImpOrForward</code>，<code>lookUpImpOrForward</code>就是走我们常常提起的那一套消息转发逻辑。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs c">IMP <span class="hljs-title function_">lookUpImpOrForward</span><span class="hljs-params">(Class cls, SEL sel, id inst, </span><br><span class="hljs-params">                       <span class="hljs-type">bool</span> initialize, <span class="hljs-type">bool</span> cache, <span class="hljs-type">bool</span> resolver)</span><br>&#123;<br>    <span class="hljs-comment">///</span><br><br>    <span class="hljs-comment">// Try this class&#x27;s cache.</span><br><br>    imp = cache_getImp(cls, sel);<br>    <span class="hljs-keyword">if</span> (imp) <span class="hljs-keyword">goto</span> done;<br><br>    <span class="hljs-comment">// Try this class&#x27;s method lists.</span><br>    &#123;<br>        Method meth = getMethodNoSuper_nolock(cls, sel);<br>        <span class="hljs-keyword">if</span> (meth) &#123;<br>            log_and_fill_cache(cls, meth-&gt;imp, sel, inst, cls);<br>            imp = meth-&gt;imp;<br>            <span class="hljs-keyword">goto</span> done;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// Try superclass caches and method lists.</span><br>    &#123;<br>        <span class="hljs-type">unsigned</span> attempts = unreasonableClassCount();<br>        <span class="hljs-keyword">for</span> (Class curClass = cls-&gt;superclass;<br>             curClass != nil;<br>             curClass = curClass-&gt;superclass)<br>        &#123;<br>            <span class="hljs-comment">// Halt if there is a cycle in the superclass chain.</span><br>            <span class="hljs-keyword">if</span> (--attempts == <span class="hljs-number">0</span>) &#123;<br>                _objc_fatal(<span class="hljs-string">&quot;Memory corruption in class list.&quot;</span>);<br>            &#125;<br>            <br>            <span class="hljs-comment">// Superclass cache.</span><br>            imp = cache_getImp(curClass, sel);<br>            <span class="hljs-keyword">if</span> (imp) &#123;<br>                <span class="hljs-keyword">if</span> (imp != (IMP)_objc_msgForward_impcache) &#123;<br>                    <span class="hljs-comment">// Found the method in a superclass. Cache it in this class.</span><br>                    log_and_fill_cache(cls, imp, sel, inst, curClass);<br>                    <span class="hljs-keyword">goto</span> done;<br>                &#125;<br>                <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">// Found a forward:: entry in a superclass.</span><br>                    <span class="hljs-comment">// Stop searching, but don&#x27;t cache yet; call method </span><br>                    <span class="hljs-comment">// resolver for this class first.</span><br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <br>            <span class="hljs-comment">// Superclass method list.</span><br>            Method meth = getMethodNoSuper_nolock(curClass, sel);<br>            <span class="hljs-keyword">if</span> (meth) &#123;<br>                log_and_fill_cache(cls, meth-&gt;imp, sel, inst, curClass);<br>                imp = meth-&gt;imp;<br>                <span class="hljs-keyword">goto</span> done;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// No implementation found. Try method resolver once.</span><br><br>    <span class="hljs-keyword">if</span> (resolver  &amp;&amp;  !triedResolver) &#123;<br>        runtimeLock.unlock();<br>        _class_resolveMethod(cls, sel, inst);<br>        runtimeLock.lock();<br>        <span class="hljs-comment">// Don&#x27;t cache the result; we don&#x27;t hold the lock so it may have </span><br>        <span class="hljs-comment">// changed already. Re-do the search from scratch instead.</span><br>        triedResolver = YES;<br>        <span class="hljs-keyword">goto</span> retry;<br>    &#125;<br><br>    <span class="hljs-comment">// No implementation found, and method resolver didn&#x27;t help. </span><br>    <span class="hljs-comment">// Use forwarding.</span><br><br>    imp = (IMP)_objc_msgForward_impcache;<br>    cache_fill(cls, sel, imp, inst);<br><br> done:<br>    runtimeLock.unlock();<br><br>    <span class="hljs-keyword">return</span> imp;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/02/14/5c64dbea06553.png"></p><p>OC对象的本质，实例对象和类对象都是<code>objc_class</code>对象，实例对象的<code>isa</code>指针指向类对象，类对象存储的是实例对象的<code>methodlist</code> <code>ivarlist</code> <code>propertylist</code> <code>cachelist</code>，如果我们不使用<code>metaClass</code>，而是给类对象单独设计一套<code>classMethodList</code>，那么类对象就需要添加一个<code>classMethodList</code>和<code>classMethodCacheList</code>，<code>msgSend</code>方法也要单独对类方法做一套查找和缓存的方案，同时<code>msgSend</code>在接受<code>cls</code>的时候需要区分<code>cla</code>究竟是类对象还是实例对象，或者单独设计一个<code>msgSendClass</code>方法来实现给类对象发送消息。</p><p>使用<code>metaClass</code>，就无需再去新增<code>classMethod</code>和<code>classMethodCacheList</code>，并且可以将<code>msgSend</code>这一个机制直接复用用到类对象。这里可能还有一点类型擦除的意思，可以忽略掉对象类型和方法类型，在消息发送时都按照一个逻辑去处理，提高效率。</p>]]></content>
    
    
    <categories>
      
      <category>iOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>iOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Swift Objective-C 桥接</title>
    <link href="/2019/01/03/swift-objective-c-bridge/"/>
    <url>/2019/01/03/swift-objective-c-bridge/</url>
    
    <content type="html"><![CDATA[<h1 id="Swift和Objective-C交互"><a href="#Swift和Objective-C交互" class="headerlink" title="Swift和Objective-C交互"></a>Swift和Objective-C交互</h1><h1 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h1><p>在Swift中调用OC初始化方法，需要用Swift的初始化方式来调用，OC中的初始化多以init开头，如果带有参数，则会经常是initWith为前缀，Swift中，init会变成Swift初始化方法，如果带有参数，则会省略With，其他视情况而定<br>OC：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs objc">- (<span class="hljs-keyword">instancetype</span>)init;<br>- (<span class="hljs-keyword">instancetype</span>)initWithFrame:(<span class="hljs-built_in">CGRect</span>)frame style:(<span class="hljs-built_in">UITableViewStyle</span>)style;<br></code></pre></td></tr></table></figure><p>Swift:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">init</span>() &#123; <span class="hljs-comment">/* ... */</span> &#125;<br><span class="hljs-keyword">init</span>(<span class="hljs-params">frame</span>: <span class="hljs-type">CGRect</span>, <span class="hljs-params">style</span>: <span class="hljs-type">UITableViewStyle</span>) &#123; <span class="hljs-comment">/* ... */</span> &#125;<br></code></pre></td></tr></table></figure><h1 id="可失败的初始化方法"><a href="#可失败的初始化方法" class="headerlink" title="可失败的初始化方法"></a>可失败的初始化方法</h1><p>首先讲一下Swift的一个特性： 可选值</p><h2 id="Optional-value"><a href="#Optional-value" class="headerlink" title="Optional value"></a>Optional value</h2><p>Optional value可选值是Swift的一个特性，Swift中只有可选类型可以为nil，</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs delphi"><span class="hljs-comment">//this work</span><br><span class="hljs-keyword">var</span> canBeNil : Int? = <span class="hljs-number">4</span><br>canBeNil = <span class="hljs-keyword">nil</span><br><span class="hljs-comment">//this not work</span><br><span class="hljs-keyword">var</span> cantBeNil : Int = <span class="hljs-number">4</span><br>cantBeNil = <span class="hljs-keyword">nil</span> <span class="hljs-comment">// can&#x27;t do this</span><br></code></pre></td></tr></table></figure><p>如果要从一个可选值中取值，就必须解包（unwrap），</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">var</span> canBeNil : Int? = <span class="hljs-number">4</span><br><span class="hljs-built_in">println</span>(canBeNil!)<br></code></pre></td></tr></table></figure><p>或者直接将可选类型的?更改为!，可以实现自动解包</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">var</span> canBeNil : Int! = <span class="hljs-number">4</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(canBeNil)</span></span> <span class="hljs-comment">// no unwrapping needed</span><br></code></pre></td></tr></table></figure><p>如果你编写的OC初始化方法没有加特别处理，那么Swift会默认将所引入的OC引用视为隐式解包的可选值类型，这就需要在初始化后添加?或者!，然而!这种写法在Swift的规则中是非常不推荐，如果初始化失败，那么会造成运行时错误。<br>而且在大型项目中引用OC编写的依赖，Xcode可能无法自动添加?来完成隐式解包，所以在不了解这一个坑的情况下容易出现初始化报错，也可能在单例模式下出现optional chaining报错，只能手动添加?或 !来进行解包，或者进行optioanl binding。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@interface</span> <span class="hljs-attribute">Robot </span>: NSObject<br><span class="hljs-variable">@property</span> (copy,readonly) NSString *name;<br><span class="hljs-selector-tag">-</span> (instancetype)<span class="hljs-selector-tag">initWithName</span>:(NSString *)<span class="hljs-selector-tag">name</span>;<br><span class="hljs-selector-tag">-</span> (NSString *)<span class="hljs-selector-tag">tellMeSomething</span>;<br>@<span class="hljs-selector-tag">end</span><br></code></pre></td></tr></table></figure><p>然后在Xcode中将这个类引用到Swift中，然后在interface中查看，这个类会被映射为：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Robot</span> : <span class="hljs-title class_">NSObject</span> &#123;    <br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> name: <span class="hljs-type">String</span>! &#123; <span class="hljs-keyword">get</span> &#125;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">init!</span>(<span class="hljs-params">name</span>: <span class="hljs-type">String</span>!)<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">tellMeSomething</span>() -&gt; <span class="hljs-type">String</span>!<br>&#125;<br></code></pre></td></tr></table></figure><p>在OC中，初始化方法返回nil是常见的情况，但是Swift引入了可选值机制，只有可选值可以为nil，所以Swift的初始化方法只能返回一个必定存在的值或者可选值。</p><h1 id="可空性"><a href="#可空性" class="headerlink" title="可空性"></a>可空性</h1><p>其实很简单：</p><ul><li>标记为<code>nonnull</code>， Swift会将其映射为正常类型</li><li>标记为<code>nullable</code>， Swift会将其映射为正常类型</li></ul><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p>在OC中：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonnull</span>,<span class="hljs-keyword">copy</span>,<span class="hljs-keyword">readonly</span>) <span class="hljs-built_in">NSString</span> *name;<br></code></pre></td></tr></table></figure><p>那么Swift映射就是</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs delphi"><span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> <span class="hljs-keyword">name</span>: <span class="hljs-keyword">String</span> <span class="hljs-comment">&#123; get &#125;</span><br></code></pre></td></tr></table></figure><h2 id="初始化方法"><a href="#初始化方法" class="headerlink" title="初始化方法"></a>初始化方法</h2><p>OC:</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elm">- (nullable instance<span class="hljs-keyword">type</span>)initWithName:(nonnull <span class="hljs-type">NSString</span> *)name;<br></code></pre></td></tr></table></figure><p>Swift:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">public</span> <span class="hljs-keyword">init?</span>(<span class="hljs-params">name</span>: <span class="hljs-type">String</span>)<br></code></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>其实初始化方法和函数是一样的,OC</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs objectivec">- (<span class="hljs-keyword">nullable</span> <span class="hljs-built_in">NSString</span> *)tellMeSomething;<br></code></pre></td></tr></table></figure><p>Swift</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livescript">public func tellMeSomething<span class="hljs-function"><span class="hljs-params">()</span> -&gt;</span> <span class="hljs-built_in">String</span>?<br></code></pre></td></tr></table></figure><h1 id="快速简洁高效的方法"><a href="#快速简洁高效的方法" class="headerlink" title="快速简洁高效的方法"></a>快速简洁高效的方法</h1><p>如果说在OC大部分属性和方法在映射Swift时需要为正常类型，仅有少部分为可为空的可选类型，那么每次添加可空性关键字未免太过麻烦，这里可以添加一个作用域：<code>NS_ASSUME_NONNULL_BEGIN</code>和 <code>NS_ASSUME_NONNULL_END</code></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-built_in">NS_ASSUME_NONNULL_BEGIN</span><br><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">Robot</span> : <span class="hljs-title">NSObject</span></span><br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">copy</span>,<span class="hljs-keyword">readonly</span>) <span class="hljs-built_in">NSString</span> *name; <span class="hljs-comment">//不为空</span><br>- (<span class="hljs-keyword">nullable</span> <span class="hljs-keyword">instancetype</span>)initWithName:(<span class="hljs-built_in">NSString</span> *)name; <span class="hljs-comment">//初始化可失败</span><br>- (<span class="hljs-keyword">nullable</span> <span class="hljs-built_in">NSString</span> *)tellMeSomething; <span class="hljs-comment">//返回值可为空</span><br><span class="hljs-keyword">@end</span><br><br><span class="hljs-built_in">NS_ASSUME_NONNULL_END</span><br></code></pre></td></tr></table></figure><p>对应Swift映射</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Robot</span> : <span class="hljs-title class_">NSObject</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> name: <span class="hljs-type">String</span> &#123; <span class="hljs-keyword">get</span> &#125;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">init?</span>(<span class="hljs-params">name</span>: <span class="hljs-type">String</span>)<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">tellMeSomething</span>() -&gt; <span class="hljs-type">String</span>?<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://useyourloaf.com/blog/using-nullable-to-annotate-objective-c/">Using nullable to annotate Objective-C code</a><br><a href="https://developer.apple.com/swift/blog/?id=25">Nullability and Objective-C - Swift Blog - Apple Developer</a><br><a href="https://blog.csdn.net/txz_gray/article/details/54406298">Objective-C中nullable、__nullable、_Nullable、_Nonnull的用法 - txz_gray的博客 - CSDN博客</a><br><a href="https://www.jianshu.com/p/2ea9c3f737ea">关于OC中的nil, NULL详解 - 简书</a><br><a href="https://www.jianshu.com/p/742c6af3afae">Swift和Objective-C混编 - 简书</a><br><a href="https://blog.csdn.net/yingBi2014/article/details/80093102">Swift项目中使用OC混编—创建桥接文件和使用Cocoapods设置User Header Search Paths - 硬币2014 - CSDN博客</a><br><a href="https://www.jianshu.com/p/0646f064d27c">如何在 Swift 项目中使用 OC 的第三方开源库 - 简书</a><br><a href="https://blog.csdn.net/top_roboo/article/details/50250785">https://blog.csdn.net/top_roboo/article/details/50250785</a></p>]]></content>
    
    
    <categories>
      
      <category>iOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>iOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
